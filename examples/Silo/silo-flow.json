[
  {
    "id": "c46e8f2c.3e845",
    "type": "tab",
    "label": "Flow 4",
    "disabled": false,
    "info": ""
  },
  {
    "id": "454dd216.7894fc",
    "type": "measurements",
    "z": "c46e8f2c.3e845",
    "name": "",
    "auth": "",
    "device": "device_io-key-357142090031740",
    "sensor": "869876",
    "channel": "357142090031740-AU004-1-1",
    "format": "none",
    "datapoint": "",
    "x": 238.0000057220459,
    "y": 650.0000066757202,
    "wires": [["c60c5431.a41498"]]
  },
  {
    "id": "ab1ceac2.abe4a8",
    "type": "measurements",
    "z": "c46e8f2c.3e845",
    "name": "",
    "auth": "",
    "device": "",
    "format": "none",
    "datapoint": "",
    "x": 238.0000057220459,
    "y": 370.0000066757202,
    "wires": [["48407452.a9a02c"]]
  },
  {
    "id": "cb08964a.e8aa98",
    "type": "comment",
    "z": "c46e8f2c.3e845",
    "name": "Silo 1",
    "info": "",
    "x": 208.0000057220459,
    "y": 250.00000667572021,
    "wires": []
  },
  {
    "id": "f641eb2c.b50d48",
    "type": "comment",
    "z": "c46e8f2c.3e845",
    "name": "Silo 2",
    "info": "",
    "x": 208.0000057220459,
    "y": 530.0000066757202,
    "wires": []
  },
  {
    "id": "96f95f57.c97ff",
    "type": "function",
    "z": "c46e8f2c.3e845",
    "name": "Calculate Fill Level",
    "func": "//    Silo\n//    +--+--+\n//    |  |  |\n//    |  + <----+ Distance Sensor\n//    |     |\n//    |     |\n//    +-----+\n//    |-----| <-+ Material\n//    |-----| \n//    +-----+\n\n// Settings\nconst SENSOR_MOUNT_HEIGHT = 2.0; // m\nconst SILO_DIAMETER = 4.0; //m\n\n// Calculations\nconst fillHeight = SENSOR_MOUNT_HEIGHT - msg.payload;\nconst fillLevel = fillHeight * Math.pow(SILO_DIAMETER/2, 2) * 1000; \n\nconst newMsg = { payload: fillLevel};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 488.0000057220459,
    "y": 450.0000066757202,
    "wires": [["528bbc25.7324e4"]]
  },
  {
    "id": "48407452.a9a02c",
    "type": "function",
    "z": "c46e8f2c.3e845",
    "name": "Sensor Value to Meters",
    "func": "msg.payload = msg.payload.value / 100;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 408.0000057220459,
    "y": 410.0000066757202,
    "wires": [["96f95f57.c97ff"]]
  },
  {
    "id": "c60c5431.a41498",
    "type": "function",
    "z": "c46e8f2c.3e845",
    "name": "Sensor Value to Meters",
    "func": "msg.payload = msg.payload.value / 1000;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 408.0000057220459,
    "y": 690.0000066757202,
    "wires": [["86e51011.cc09b"]]
  },
  {
    "id": "86e51011.cc09b",
    "type": "function",
    "z": "c46e8f2c.3e845",
    "name": "Calculate Fill Level",
    "func": "//    Silo\n//    +--+--+\n//    |  |  |\n//    |  + <----+ Distance Sensor\n//    |     |\n//    |     |\n//    +-----+\n//    |-----| <-+ Material\n//    |-----| \n//    +-----+\n\n// Settings\nconst SENSOR_MOUNT_HEIGHT = 0.4; // m\nconst SILO_DIAMETER = 3; //m\n\n// Calculations\nconst fillHeight = SENSOR_MOUNT_HEIGHT - msg.payload;\nconst fillLevel = fillHeight * Math.pow(SILO_DIAMETER/2, 2) * 1000; \n\nconst newMsg = { payload: fillLevel};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 488.0000057220459,
    "y": 730.0000066757202,
    "wires": [["fa08d5c9.3a7228"]]
  },
  {
    "id": "528bbc25.7324e4",
    "type": "change",
    "z": "c46e8f2c.3e845",
    "name": "",
    "rules": [
      { "t": "set", "p": "Silo1", "pt": "flow", "to": "payload", "tot": "msg" }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 558.0000057220459,
    "y": 490.0000066757202,
    "wires": [["4c195b31.a320e4"]]
  },
  {
    "id": "4c195b31.a320e4",
    "type": "change",
    "z": "c46e8f2c.3e845",
    "name": "sum",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "$flowContext('Silo1')+$flowContext('Silo2')",
        "tot": "jsonata"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 748.0000057220459,
    "y": 630.0000066757202,
    "wires": [["abc39c3b.f8d04"]]
  },
  {
    "id": "fa08d5c9.3a7228",
    "type": "change",
    "z": "c46e8f2c.3e845",
    "name": "",
    "rules": [
      { "t": "set", "p": "Silo2", "pt": "flow", "to": "payload", "tot": "msg" }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 558.0000057220459,
    "y": 770.0000066757202,
    "wires": [["4c195b31.a320e4"]]
  },
  {
    "id": "abc39c3b.f8d04",
    "type": "rbe",
    "z": "c46e8f2c.3e845",
    "name": "",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "property": "payload",
    "x": 788.0000057220459,
    "y": 670.0000066757202,
    "wires": [["9e398b9b.aacba8"]]
  },
  {
    "id": "8f36a9be.6c5a58",
    "type": "e-mail",
    "z": "c46e8f2c.3e845",
    "server": "",
    "port": "465",
    "secure": true,
    "name": "",
    "dname": "",
    "x": 968.0000057220459,
    "y": 790.0000066757202,
    "wires": []
  },
  {
    "id": "a9cc45d.c92a3b8",
    "type": "inject",
    "z": "c46e8f2c.3e845",
    "name": "Inject Test Data: Full",
    "topic": "",
    "payload": "{\"value\": 50}",
    "payloadType": "json",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 248.0000057220459,
    "y": 570.0000066757202,
    "wires": [["c60c5431.a41498"]]
  },
  {
    "id": "9c81119.bab43f",
    "type": "inject",
    "z": "c46e8f2c.3e845",
    "name": "Inject Test Data: Empty",
    "topic": "",
    "payload": "{\"value\": 400}",
    "payloadType": "json",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 258.0000057220459,
    "y": 610.0000066757202,
    "wires": [["c60c5431.a41498"]]
  },
  {
    "id": "33e17062.3767a",
    "type": "inject",
    "z": "c46e8f2c.3e845",
    "name": "Inject Test Data: Full",
    "topic": "",
    "payload": "{\"value\": 25}",
    "payloadType": "json",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 248.0000057220459,
    "y": 290.0000066757202,
    "wires": [["48407452.a9a02c"]]
  },
  {
    "id": "607c50b5.49dd5",
    "type": "inject",
    "z": "c46e8f2c.3e845",
    "name": "Inject Test Data: Empty",
    "topic": "",
    "payload": "{\"value\":195}",
    "payloadType": "json",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 258.0000057220459,
    "y": 330.0000066757202,
    "wires": [["48407452.a9a02c"]]
  },
  {
    "id": "9e398b9b.aacba8",
    "type": "function",
    "z": "c46e8f2c.3e845",
    "name": "Check if Empty",
    "func": "// Settings\nconst THRESHOLD = 500.0; // 500 liters is threashold for email\nconst HYSTERESIS = 10.0; // hysteresis in percent\nconst STORE = \"mailHystersisOk\";\n\n// Hysteresis\nif (msg.payload > THRESHOLD * (1+HYSTERESIS/100)) {\n    context.set(STORE, true);\n} \n// Compare if empty\nif (msg.payload <= THRESHOLD && context.get(STORE)) {\n    context.set(STORE, false)\n    return msg;\n} else {\n    return null;\n}\n\n\n\n",
    "outputs": 1,
    "noerr": 0,
    "x": 858.0000057220459,
    "y": 710.0000066757202,
    "wires": [["23e3b1bc.28476e"]]
  },
  {
    "id": "23e3b1bc.28476e",
    "type": "function",
    "z": "c46e8f2c.3e845",
    "name": "Mail",
    "func": "const mail = {};\n\nmail.topic = \"New Order\"\nmail.payload = `Dear Mr. Musterman,\n\ni would like to order a new batch of ${Math.round(2000 - msg.payload)} liters to our \nMunich location.\n\nBest regards,\nAnna Accounting\n`;\nreturn mail;",
    "outputs": 1,
    "noerr": 0,
    "x": 948.0000057220459,
    "y": 750.0000066757202,
    "wires": [["8f36a9be.6c5a58"]]
  },
  {
    "id": "f98d3488.b51358",
    "type": "comment",
    "z": "c46e8f2c.3e845",
    "name": "Flow Description",
    "info": "In this example two io-keys are used to monitor\ntwo silos. The sensor readings are converted to\nliters and the flow adds up the fill levels of both\nsilos. If the total material is too low the flow\nsends an email to notify the supplier.",
    "x": 232.16669273376465,
    "y": 152.66667413711548,
    "wires": []
  }
]
